#!/bin/sh

##########################################################################
#                                                                        #
#                 *************************************                  #
#                 * Copyright 2019 Federico Cosentino *                  #
#                 *************************************                  #
#                                                                        #
# This program is free software: you can redistribute it and/or modify   #
# it under the terms of the GNU General Public License as published by   #
# the Free Software Foundation, either version 3 of the License, or      #
# (at your option) any later version.                                    #
#                                                                        #
# This program is distributed in the hope that it will be useful,        #
# but WITHOUT ANY WARRANTY; without even the implied warranty of         #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          #
# GNU General Public License for more details.                           #
#                                                                        #
# You should have received a copy of the GNU General Public License      #
# along with this program.  If not, see <https://www.gnu.org/licenses/>. #
#                                                                        #
##########################################################################

#############
# Variables #
#############

iptables="/usr/sbin/iptables"
firewall_home="/etc/firewall.d"
config_main="$firewall_home/config"
config_forwarding="$firewall_home/ports_forwarding.txt"
config_firewall="$firewall_home/firewall_rules.txt"

# If config is not present exit immediately
[ -f "$config_main" ] || exit 0

#############
# Functions #
#############

nat() {
	# Details on how to set a NAT here: https://terrywang.net/2016/02/02/new-iptables-gotchas.html

	# POSTROUTING
	if [ -z "$ExternalIP" ] ; then
		# MASQUERADE works with dinamically assigned IPs, but it's slower to compute due to
		# the fact that the kernel has to find the IP every time
		$iptables -t nat -A POSTROUTING -o $ExternalDev -s $InternalNet -j MASQUERADE
	else
		# SNAT is good for static routing where the external IP is well known
		$iptables -t nat -A POSTROUTING -o $ExternalDev -s $InternalNet -j SNAT --to-source $ExternalIP
	fi

	# PREROUTING
	# No need to do it thanks to the IP forwarding
}

ports_forwarding() {
	[ -f "$config_forwarding" ] || return 0

	while read -r line ; do
		# Ignore comments and blank lines.
		case "$line" in
			""|"#"*) continue ;;
		esac

		proto=$(echo $line | awk '{print $1}')
		src_port=$(echo $line | awk '{print $2}')
		dst_ip=$(echo $line | awk '{print $3}')
		dst_port=$(echo $line | awk '{print $4}')

		$iptables -t nat -A PREROUTING -p $proto -i $ExternalDev --dport $src_port -j DNAT --to-destination $dst_ip:$dst_port
		$iptables -t filter -A FORWARD -p $proto -d $dst_ip --dport $src_port -j ACCEPT

	done < "$config_forwarding"
}

firewall() {
	# Disable FORWARD
	$iptables -t filter -P FORWARD DROP
	$iptables -t filter -A FORWARD ! -i $InternalDev -m state --state ESTABLISHED,RELATED -j ACCEPT
	$iptables -t filter -A FORWARD -i $InternalDev -j ACCEPT

	# Disable INPUT
	$iptables -t filter -P INPUT DROP
	$iptables -t filter -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	if [ x$AllowICMP = xtrue ] ; then
		$iptables -t filter -A INPUT -p icmp -j ACCEPT
	fi
	
	# Other rules
	[ -f "$config_firewall" ] || return 0

	while read -r line ; do
		# Ignore comments and blank lines.
		case "$line" in
			""|"#"*) continue ;;
		esac

		proto=$(echo $line | awk '{print $1}')
		interface=$(echo $line | awk '{print $2}')
		port=$(echo $line | awk '{print $3}')

		case "$interface" in
			"internal")
				$iptables -t filter -A INPUT -p $proto -i $InternalDev --dport $port -j ACCEPT
				;;
			"external")
				$iptables -t filter -A INPUT -p $proto -i $ExternalDev --dport $port -j ACCEPT
				;;
			"all")
				$iptables -t filter -A INPUT -p $proto --dport $port -j ACCEPT
				;;
		esac

	done < "$config_firewall"
}

start() {
	source "$config_main"
	if [ $? != 0 ] ; then
		echo "Error reading the config file $config_main."
		exit 1
	fi

	printf "Setting up the firewall: "
	if [ x$GlobalEnable = xfalse ] ; then
		echo "Nothing to do."
		exit 0
	fi

	# Enable SSH on this system
	# This rule is mandatory
	$iptables -t filter -A INPUT -p tcp --dport 22 -j ACCEPT
	
	if [ x$EnableNat = xtrue ] ; then
		nat # Enable the NAT
		ports_forwarding # Set the forwarding roles
	fi

	if [ x$EnableFirewall = xtrue ] ; then
		# Set custom roles
		firewall
	fi

	echo 1 > /proc/sys/net/ipv4/ip_forward

	echo "OK"
}

stop() {
	printf "Deleting all firewall rules: "

	echo 0 > /proc/sys/net/ipv4/ip_forward

	$iptables -t filter -P FORWARD ACCEPT
	$iptables -t filter -P INPUT ACCEPT

	$iptables -t nat -F
	$iptables -t filter -F

	echo "OK"
}

restart() {
	stop
	start
}

########
# MAIN #
########

case "$1" in
	start)
		start
		;;
	stop)
		stop
		;;
	restart|reload)
		restart
		;;
	status)
		echo -e "\033[1mList of rules on default table (filter):\033[0m"
		$iptables -L -v -n
		echo -e "\n\033[1mList of rules on nat table:\033[0m"
		$iptables -L -v -n -t nat
		;;
	*)
		echo "Usage: $0 {start|stop|restart|status}"
		exit 1
esac

exit $?
